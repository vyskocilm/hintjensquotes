quotes:
  -
    link: "http://hintjens.com/blog:17"
    title: "Testing Considered Evil"
    quotes:
      - It is impossible to know what software we need to make before we start making it.
      - When you think you know what the problem is, you are still wrong.
      - Only a diverse crowd with conflicting perspectives can really identify the problem.
      - If you don't have that crowd of people fully engaged in every stage of your software development process, it will go wrong in unpleasant ways.
      - Releasing buggy immature (open source) software is an essential part of building a community.

  -
    link: "http://hintjens.com/blog:19"
    title: How to Design Perfect (Software) Products 
    quotes:
      - |
        Ideas are cheap. No exceptions. There are no brilliant ideas. Anyone
        who tries to start a discussion with '"oooh, we can do this too!"' should
        be beaten down with all the passion one reserves for traveling
        musicians. It is like sitting in a cafe at the foot of a mountain,
        drinking a hot chocolate and telling others, '"hey, I have a great idea,
        we can climb that mountain! And build a chalet on top! With two saunas!
        And a garden! Hey, and we can make it solar powered! Dude, that is
        awesome! What color should we paint it? Green! No, blue! OK, go and
        make it, I will stay here and make spreadsheets and graphics!"'
      - |
        The starting point for a good design process is to collect problems
        that confront people. The second step is to evaluate these problems
        with the basic question, '"how much is it worth to solve this problem?"'
        Having done that, we can collect a set of problems that are worth
        solving.
      - |
        Good solutions to real problems will succeed as products. Their success
        will depend on how good and cheap the solution is, and how important
        the problem is. But their success will also depend on how much they
        demand in effort to use, in other words how simple they are.
      - |
        Making stuff that you don't immediately have a need for is pointless.
        Doesn't matter how talented or brilliant you are, if you just sit down and
        make stuff, you are most likely wasting your time.
      - |
        Problems are not equal. Some are simple, and some are complex. Ironically,
        solving the simpler problems often has more value to more people than
        solving the really hard ones. So if you allow engineers to just work on
        random things, they'll most focus on the most interesting but least
        worthwhile things.
      - |
        Engineers and designers love to make stuff and decoration, and this
        inevitably leads to complexity. It is crucial to have a '"stop mechanism"', a
        way to set short, hard deadlines that force people to make smaller, simpler
        answers to just the most crucial problems.
  -
    link: "http://hintjens.com/blog:22"
    title: "The Lazy Perfectionist and other Patterns "
    quotes:
      - |
        The Lazy Perfectionist

        Never design anything that's not a precise minimal answer to a problem
        we can identify and have to solve. (Pieter Hintjens)
      - |
        The Benevolent Tyrant

        The control of a large force is the same principle as the control of a
        few men: it is merely a question of dividing up their numbers. (Sun Tzu)
      - |
        The Earth and Sky</span>

        The ideal team consists of two sides: one writing code, and one providing feedback. (Pieter Hintjens)
      - |
        The Happy Failure

        To succeed you must learn to fail rapidly, cheaply, and often. (Pieter Hintjens)
      - |
        The Open Door

        The accuracy of knowledge comes from diversity. (Pieter Hintjens)
      - |
        The Laughing Clown

        Perfection precludes participation (Pieter Hintjens)
      - |
        The Mindful General

        Make no plans. Set goals, develop strategies and tactics. (Pieter Hintjens)
      - |
        The Social Engineer
        
        If you know the enemy and know yourself, you need not fear the result of a hundred battles. (Sun Tzu)
      - |
        The Constant Gardener

        Do not repeat the tactics which gained you one victory, but let your methods be regulated by the infinite variety of circumstances. (Sun Tzu)
      - |
        The Rolling Stone

        After crossing a river, you should get far away from it. (Sun Tzu)
      - |
        The Pirate Gang

        Code, like all knowledge, works best as collective — not private — property. (Pieter Hintjens)

      - |
        The Flash Mob

        Water shapes its course according to the nature of the ground over which it flows. (Sun Tzu)
      - |
        The Canary Watcher

        Pain is not, generally, a Good Sign. (Pieter Hintjens)
      - |
        The Hangman

        Never interrupt others when they are making mistakes. (Pieter Hintjens)
      - |
        The Historian

        The public record may be tedious, but it's the only way to prevent collusion. (Pieter Hintjens)
      - |
        The Provocateur

        When a man knows he is to be hanged in a fortnight, it concentrates his mind wonderfully. (Samuel Johnson)
      - |
        The Mystic

        When people argue or complain, just write them a Sun Tzu quotation. (Mikko Koppanen)

  -
    title: My 4-year old is a better programmer than you
    link: "http://hintjens.com/blog:80"
    quotes:
      - |
        Now, my claim, and I've argued this in many articles and texts, is that
        the more we approach the model where anyone can play, the better the code
        we make. Quality means one thing: accuracy. And accuracy correlates to the size
        and diversity of the crowd who are playing, and their freedom to organize.

  -
    title: C4.1 - an Exothermic Process 
    link: http://hintjens.com/blog:93
    quotes:
      - |
        What is most fun is that ZeroMQ takes zero management these days. It is
        self-steering, self-feeding, and self-organizing. We have applied C4.1
        http://rfc.zeromq.org/spec:22 to old projects like libzmq, and brand
        new ones. The results are the same. If the project does something
        useful, it takes off, and contributors join, and everyone enjoys
        themselves.
      - |
        C4.1 is an exothermic process. It produces almost perfect software.
        ZeroMQ's oddities all date from before 2012, and are slowly
        disappearing. ZeroMQ master is almost always stable. It just does not
        break stable APIs or protocols. The mailing list is polite and happy.
        We do not argue.

        If you run an open source project, and your commit chart does not look like this,
        go read http://rfc.zeromq.org/spec:22.

  -
    title: Ten Rules for Good API Design 
    link: http://hintjens.com/blog:94
    quotes:
      - |
        Make Only What You Need Today

        This is the top rule. Only solve problems you must solve, and make
        minimal answers to them. The temptation to solve tomorrow's problems is
        huge. Resist! Instead of trying to ship code in advance, focus on
        reducing your shipping cycles. If it takes you a few hours to ship
        answers to new questions, you can stop guessing what tomorrow's
        questions will be.
      - |
        Make the API modular

        Divide large problems into smaller ones, and solve each one separately. A
        modular API is easier to learn, and change over time. You can deprecate old
        modules with new ones. You can teach modules one by one. You can separate
        experimental pieces of the API from stable ones, from legacy pieces.
      - |
        Use Structured Syntax

        Use a structured syntax for the API: thing.action or thing.property
        instead of do_action_with_thing. The syntax naturally fits a modular
        approach, where each module is a class of things.
      - |
        Use Natural Semantics

        Invent no new concepts. Use only concepts the developer will already
        know, as the basis for your class system. If you find yourself having
        to explain a concept, you are doing it wrong. Either you're solving
        future problems, or you're structuring the API wrongly.

      - |
        Make the API Self-consistent

        Be rigorous in using the same style and conventions in every class.
        Consistency means when someone learns one class, they've learned them
        all. Document your conventions and make them a required standard for
        contributors.

      - |
        Make the API Extensible

        Easy extensibility has many benefits, not least it welcomes contributors. It
        also lets you delay implementing features, with '"it iss easy to add later if we
        need it."' Every feature you do not add today is a win.

      - |
        Make it Fully Testable

        Every class and method must be fully testable by hostile code. Write your tests
        as you write code, and use the tests as documentation of the contracts that the
        API provides to the outside world. Run these tests every time the code changes.
        Do not worry about code coverage. What matters is the external contract.
        Consider using contract lifecycles http://hintjens.com/blog:85.

      - |
        Grow by Layering

        Keep your APIs focused and grow them over time by layering new APIs on top.
        Extensibility does not mean indefinite growth. Be explicit about the scope of

      - |
        Keep it Simple to Use

        The ultimate test is how simple the API is to use. When you write an example,
        could your code look simpler? Are you forcing the user to specify options they
        don't care about? Are they taking extra steps that add no value? Be obsessive
        about reducing the visible surface area of your API.

      - |
        Keep it Portable

        Do not allow system concepts to leak into the API. Abstract them cleanly, with
        the intention: this API could run on any operating system. Your API must hide
        the implementation, though be careful about rule #4, and use natural
        abstractions.

  -
    title: Ten Rules for Open Source Success
    link: http://hintjens.com/blog:95
    quotes:
      - |
        People Before Code

        This is the Golden Rule, taught to me by Isabel Drost-Fromm. Build community,
        not software. Without community your code will solve the wrong problems. It
        will be abandoned, ignored, and will die. Collect people and give them space to
        work together. Give them good challenges. Stop writing code yourself.

      - |
        Use a Share-Alike License

        Share-alike is the seat belt of open source. You can boast about how you
        don't need it, until you have a bad accident. Then you will either find
        your face smeared on the wall, or have light bruising. Don't become a
        smear. Use share-alike. If GPL/LGPL is too political for you, use MPLv2.

      - |
        Use an Zero-Consensus Process

        Seeking upfront consensus is like waiting for the ideal life partner. It is
        kind of crazy. Github killed upfront consensus with their fork/pull-request
        flow, so you've no excuse in 2015. Accept patches like Wikipedia accepts edits.
        Merge first, fix later, and discuss out of band. Do all work on master. Don't
        make people wait. You'll get consensus, after the fact.

      - |
        Problem, then Solution

        Educate yourself and others to focus on problems not features. Every
        patch must be a minimal solution to a solid problem. Embrace experiments
        and wild ideas. Help people to not blow up the lab. Collect good
        solutions and throw away the bad ones. Embrace failure, at all levels. It
        is a necessary part of the learning process.

      - |
        Contracts Before Internals

        Be aggressive about documenting contracts (APIs and protocols) and testing
        them. Use CI testing on all public contracts. Code coverage is irrelevant. Code
        documentation is irrelevant. All that matters is what contracts the code
        implements, and how well it does that.

      - |
        Promote From Within

        Promote contributors to maintainers, and maintainers to owners. Do this
        smoothly, easily, and without fear. Keep final authority to ban bad
        actors. Encourage people to start their own projects, especially to build
        on, or compete, with existing projects. Remove power from people who are
        not earning it on a daily basis.

      - |
        Write Down the Rules

        As you develop your rules, write them down so people can learn them. Actually,
        don't even bother. Just use the C4.1 rules we already designed for ZeroMQ, and
        simplify them if you want to.

      - |
        Enforce the Rules Fairly

        Use your power to enforce rules, not bully others into your '"vision"' of
        the project's direction. Above all, obey the rules yourself. Nothing is
        worse than a clique of maintainers who act special while blocking patches
        because '"they do not like them."' OK, that is exaggeration. Many things are
        much worse. Still, the clique thing will harm a project.

      - |
        Aim For the Cloud

        Aim for a cloud of small, independent, self-organizing, competing
        projects. Be intolerant of large projects. By '"large"' I mean a project
        that has more than 2-3 core minds working on it. Don't use fancy
        dependencies like submodules. Let people pick and choose the projects
        they want to put together. It's economics 101.

      - |
        Be Happy and Pleasant

        Maybe you noticed that '"be innovative"' is not anywhere on my list. It is
        probably point 11 or 12. Anyhow, cultivate a positive and pleasant mood
        in your community. There are no stupid questions. There are no stupid
        people. There are a few bad actors, who mostly stay away when the rules
        are clear. And everyone else is valuable and welcome like a guest who has
        traveled far to see us.
  -
    title: Ten Rules for Good code
    link: http://hintjens.com/blog:96
    quotes:
      - |
        Use Git and Github

        I am not going to dignify this with a non-zero number. If you aren't
        using git and github.com then you are already making excuses for doing
        it wrong. It is not about fashion or groupthink. Github (the company)
        know how to make Good Code, and their tools reflect this.

      - |
        Use Problem-driven Development

        Identify the next single smallest problem you want to fix. Write the
        simplest plausible solution, and test it. Your commit message states
        the problem, and then your solution. If there is a single change you
        make to how you code, please, this one. Do not make features. Solve
        problems.

      - |
        Make it Open Source

        Not eventually. Not when it is working. Not if you get management
        approval. Now, today, before it is finished. Before you even decide what
        you are making. Before your first commit, even. Open source means
        people, and that means voices to guide you to solving the right
        problems.

      - |
        Always Be Making APIs

        Write every piece of code as the body of an API. Read my Ten Rules for
        API Design. Be generous with new repositories. Layer your projects like
        you are making lasagna. Document your APIs, use them, publish them.

      - |
        Do not Document the Code

        Documenting code is like writing '"Tasty!"' on the side of a coffee
        cup. If the code is not readable on a grey Monday morning before
        coffee, chuck it out and start again. What you document are APIs, so
        that can mean methods and classes. That is fine. Explaining what this
        funky loop does is not fine.

      - |
        Style for Readability

        You do need a style guide. And it must be strict. All that matters is
        readability. Collect patterns that work in your language. Document
        them, improve them, and make sure the entire codebase conforms. Do not
        use automatic reformatters, as they hide mischief. A good style is
        worth applying by hand.

      - |
        Better is the Enemy of the Good

        We already know this yet it is worth repeating. Do not optimize your
        code. Aim for '"OK"' and then stop. If you are following rule 1 then
        slow performance will pop up as a juicy problem somewhere down the
        line. It will always, always, be in a place you never thought of.

      - |
        Use Your Own Work

        It is shocking how many programmers do not use their own work. Then
        they have the arrogance to lecture users about '"what they really need."'
        Look, if I brew beer and make pizza, then I am damn well going to sit at
        my table. Good Code is so delicious you can not resist it.

      - |
        Use Code Generators Carefully

        Code generation is powerful stuff. I am speaking of industrial-scale
        tools like GSL. If you do not use it, you are handicapping yourself. If
        you over-use it, you get insanity. Learn to look for the sweet spot
        where it is simple and obvious.

      - |
        Make Portable Code

        When you have to get into system internals, hide these behind abstract
        APIs. Your code should run on every box there is. If it does not, then
        invest in portability frameworks. This always pays off. Portable code
        is always simpler and cleaner than the weird stuff that thinks it is
        special because it does voodoo.

      - |
        Lie to Your Management

        Maybe you have an enlightened management that knows what '"open
        allocation"' means. Or maybe they are going to be one of your main
        problems. When they demand schedules, plannings, designs, and
        architectures, lie to them. If you cannot do this, find someone who
        can. It is easier to get forgiveness for success than permission.
  -
    title: Ten signs of a Psychopath
    link: http://hintjens.com/blog:97
    quotes:
      - |
        He's really into you

        Mallory likes you and wants to hang out with you. A lot. He thinks you're
        special, interesting. You wonder why he's doing this. Did you suddenly become a
        lot more attractive? Yet it's flattering and makes you feel good about
        yourself. So you don't ask if he's too good to be true.

      - |
        He likes himself… a lot

        Mallory dresses well, works out, enjoys showing himself off. He spends a lot of
        time at the gym. He has nice sunglasses. He cares a lot about how he looks, and
        this is constant, no matter the occasion. He takes a lot of selfies and posts
        them online. You feel like he's talking to people you don't know.

      - |
        He leaves deep impressions

        It goes further than just fitting in. Mallory leaves a lasting
        impression in people. You will notice that people talk about him like
        he's a celebrity. He has some way of projecting his character that
        people adore. It makes you vaguely jealous.

      - |
        He is rude to unimportant people

        While he charms to your friends and relations, he is dry or even rude to people
        who are beneath him. For example in a restaurant he will not thank the staff
        who serve him. Unless he sees someone he likes, and then he is charming. You
        feel uneasy with his behavior.

      - |
        He asks you for small favors

        I call this '"greasing"' and it is a thing Mallory does to make you like him. He
        asks you for small innocent favors. Helping him move stuff. Advising him with
        something. Just keep him company. Every time you say '"yes"' you become easier to
        manipulate. You start to like him. It's called the Ben Franklin Effect.

      - |
        He gets angry easily

        As you spend time with Mallory you'll have small, stupid arguments.
        He'll misunderstand something you said, and be angry with you. It will
        blow over, after you apologize. He never apologizes. This is another
        classic tactic to rope you into a '"relationship"' with him. You begin to
        feel anxious when you talk with him.

      - |
        He has no history

        He has no old friends you can speak to. He has lots of stories, yet
        nothing you can check on. If you google him, there is little except his
        self portraits. He has no professional track record. His past is blank
        and his present is unstable. This makes you curious. Yet he's open to
        everything. Think of the possibilities.

      - |
        He is super social

        He is fast to make friends with your family, colleagues, anyone who
        matters in your life. He does this with energy. Pretty soon everyone
        has accepted him and likes him. If you have any doubts about him,
        others will tell you he's OK. This soothes you.

      - |
        He needs things from you

        He doesn't hide that you can help him. He may even say, '"only you can
        save me."' It is never about money. Maybe he wants to save the world,
        and you can help that happen. Over time, his needs become your goals.
        He makes you feel like the most important person in the world.

      - |
        You start to change your life

        You begin to shift your priorities to suit Mallory. You begin to break old
        habits, and spend less time with people you usually hang out with. You feel
        energized and positive. Mallory promises you so many things!

  -
    title: Ten Habits of a Good Programmer
    link: http://hintjens.com/blog:98
    quotes:
      - |
        If it works and is still useful, don't throw it out.

        This means writing portable code, and making reusable pieces. Libraries, APIs,
        whatever it takes. Be your own client. Layer your work.

      - |
        Never solve the same problem twice in parallel.

        This means making tools. Adopt the Unix philosophy: command-line tools
        that do one thing and do it well. Learn about pipes. While you're at
        it, use Linux (or a BSD) as your development box.

      - |
        Solve the same problem often in serial.

        This means being willing to throw out your code and rewrite it when you find
        better solutions. If you work towards minimal APIs rather than features, this
        works better.

      - |
        Write code, and repeat, until you are fluent in your language.

        Using a small language makes this easier. It takes years to become really
        fluent in a programming language.

      - |
        Learn to use code generators.

        I've spoken of GSL https://github.com/imatix/gsl before. A
        general-purpose code generator is an essential tool for a serious
        programmer. There are a few options. Try them, choose one.

      - |
        Work with others.

        Learn the techniques of collaboration. A good way is to contribute to
        an open source project. Or even better, start your own. Read Chapter 6
        of the ZeroMQ Guide http://zguide.zeromq.org/. It will enlighten.

      - |
        Technology is a tool, not a tribal affiliation.

        Never turn pragmatic choice of tools into a belief system. I have
        written editors and code generators in COBOL 74. The language matters
        little.

      - |
        Aim for this cycle: learn, play, work, teach.

        It is the fastest way to get better and deliver code that others can
        use and trust. Avoid this cycle: imagine, argue, agree, work. It is the
        fastest way to deliver junk.

      - |
       Get your edit-compile-run-fail cycles down to seconds.

       If your language offers a REPL that's cool. If not, make a shell script
       that runs the loop for you. Your goal is that after every edit, your
       code self-tests and passes or fails. Use asserts or equivalent to
       challenge your own code.

      - |
        If you need debuggers, you're doing it wrong.

        Make one change, test one change. Layer your code and write self-tests so
        that when it works, it always works. Use print statements. Aim towards
        APIs that are fully testable. Avoid language patterns that deliver fuzzy,
        unclear internal APIs.

  -
    title: Ten Steps Towards Happiness
    link: http://hintjens.com/blog:99
    quotes:
      - |
        Invest in your senses

        Your body and mind need a good diet. Make your own food, and make it
        tasty. Take photographs you find beautiful. Play music that excites
        you. Wear clothes that feel nice. Walk through the city at night, in
        the rain. Feel the texture of your life, with all your senses.

      - |
        Do things you are bad at

        Learning makes us feel alive. Challenge yourself, and keep proving you
        can learn. Learn to juggle, to hold your breath underwater for longer,
        to solve a Rubik's cube. Learn to play music and play for yourself.
        Learn to paint and draw.

      - |
        Enjoy other people

        Nothing makes us happier than other people. Take the time to talk to
        people you cross paths with. Be nice, chat, smile. If you live far from
        other people, move to be closer. If you drive a lot, change your life
        so you can walk and cycle. Go out and mingle.

      - |
        Be part of bigger things

        Being part of bigger things makes us feel valued. Find communities and
        projects to be part of. Start your own. It could be online or in the
        real world. Even the smallest contributions can make a difference to
        someone. Be precious to strangers.

      - |
        Finish your projects

        A sense of achievement gives us hope and confidence. Write down your
        life's accomplishments. Even small ones. Now keep this list up to date.
        Every year, think of what you've achieved. Finish your projects and
        move on to new ones.

      - |
        Get rid of bad actors

        Nothing can make us more miserable than other people. Read "The
        Psychopath Code" http://hintjens.com/blog:_psychopaths and learn to
        recognize bad actors. When someone is a source of misery, remove them
        from your life. Whether it takes a day or a year, make this a project,
        and finish it.

      - |
        Ground your emotions

        To be happy you must deal with negative emotions. Learn to recognize
        these in yourself, and deal with them
        http://hintjens.com/blog:81#toc12. Anger, self-pity, jealousy, fear,
        hate, loneliness… set them aside, and let happiness take their place.
        If you drink to relax, cut it out.

      - |
        Revalue your time

        Stop wasting your time on commuting, boring jobs, meetings, TV. Do only
        things that you feel are worthwhile, with people you like. If this
        means a cut in income, so be it. Be the person you really want to be.
        Don't take it all too seriously, we all die.

      - |
        Travel light

        Material possessions are more often a burden than a pleasure. Give away
        or sell anything you own that does not make you happy. Do not let your
        possessions define you. We live in a world of plenty. That means you
        can own less, not more.

      - |
        Want nothing, accept everything

        Above all, explore the world without desire or demand, and be tolerant
        of whatever happens. Most people are nice, and even the others teach
        us. When you want nothing, you cannot be disappointed. When you accept
        everything, you will see beauty in every moment.

